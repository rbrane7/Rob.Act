using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.ComponentModel;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Diagnostics;
using Microsoft.Win32;
using Aid.Extension;

namespace Rob.Act.Analyze
{
	/// <summary>
	/// Interaction logic for MainWindow.xaml
	/// </summary>
	public partial class Main : Window , INotifyPropertyChanged
	{
		Aid.Prog.Doct Doct = (System.Configuration.ConfigurationManager.AppSettings["Doct.Uri"].Uri(),e=>Trace.TraceError(e.ToString())) ;
		public Book Book { get ; private set ; } = new Book("Main") ;
		public Aid.Collections.ObservableList<Aspect> Aspects { get ; private set ; } = new Aid.Collections.ObservableList<Aspect>() ;
		public Aspect Aspect { get => aspect ; protected set { if( value==aspect ) return ; aspect = value ; PropertyChanged.On(this,"Aspect") ; } } Aspect aspect ;
		public event PropertyChangedEventHandler PropertyChanged ;
		public Main() { InitializeComponent() ; DataContext = this ; Doct += (this,"Main") ; }
		protected override void OnClosing( CancelEventArgs e ) { Doct?.Dispose() ; base.OnClosing(e) ; }
		protected override void OnClosed( EventArgs e ) { base.OnClosed(e) ; Process.GetCurrentProcess().Kill() ; }
		void AddActionButton_Click( object sender , RoutedEventArgs e ) { var dlg = new OpenFileDialog() ; if( dlg.ShowDialog(this)==true ) NewAction(dlg.FileName) ; }
		void NewAction( string file ) => Book += file.ReadAllText().Internalize() ;
		void BookGrid_SelectionChanged( object sender, SelectionChangedEventArgs e ) { /*if( BookGrid.SelectedItems?.Count>1 ) { Matrixex.Visibility = Visibility.Visible ; Matrix.Visibility = Visibility.Collapsed ;  } else { Matrixex.Visibility = Visibility.Collapsed ; Matrix.Visibility = Visibility.Visible ; }*/ }
		void AspectGrid_AutoGeneratedColumns( object sender , EventArgs e ) { var grid = sender as DataGrid ; var aspect = (grid.ItemsSource as Aspect.Iterator?)?.Context ; grid.Columns.Clear() ; uint i=0 ; foreach( var ax in aspect ) grid.Columns.Add(new DataGridTextColumn{Header=ax.Spec,Binding=new Binding( $"[{i++}]")}) ; }
		void AspectTabs_Selected( object sender, SelectionChangedEventArgs e ) { var asp = e.AddedItems.Count>0 ? e.AddedItems[0] : null ; (asp as Aspect ?? (asp as Path)?.Spectrum).Set(a=>Aspect=a) ; }
		void AddAxeButton_Click( object sender, RoutedEventArgs e ) => Aspect.Add(new Axe{ Aspect = Aspect } ) ;
	}
}
