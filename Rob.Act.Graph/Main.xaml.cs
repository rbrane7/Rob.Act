using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.ComponentModel;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Diagnostics;
using Microsoft.Win32;
using Aid.Extension;
using System.Collections.Specialized;

namespace Rob.Act.Analyze
{
	/// <summary>
	/// Interaction logic for MainWindow.xaml
	/// </summary>
	public partial class Main : Window , INotifyPropertyChanged
	{
		Aid.Prog.Doct Doct = (System.Configuration.ConfigurationManager.AppSettings["Doct.Uri"].Uri(),e=>Trace.TraceError(e.ToString())) ;
		public event PropertyChangedEventHandler PropertyChanged ;
		public Main() { InitializeComponent() ; DataContext = this ; Doct += (this,"Main") ; Axe.Aspecter = ()=>Book.Select(p=>p.Spectrum).Union(Aspects) ; }
		protected override void OnClosing( CancelEventArgs e ) { Doct?.Dispose() ; base.OnClosing(e) ; }
		protected override void OnClosed( EventArgs e ) { base.OnClosed(e) ; Process.GetCurrentProcess().Kill() ; }
		void NewAction( string file ) => Book += file.ReadAllText().Internalize() ;
		public Book Book { get ; private set ; } = new Book("Main") ;
		public IEnumerable<Aspect> Sources => Aspect is Path.Aspect || Aspect==null ? Enumerable.Empty<Aspect>() : BookGrid.SelectedItems.OfType<Path>().Select(s=>new Aspect(Aspect){Source=s.Spectrum}) ;
		public Aid.Collections.ObservableList<Aspect> Aspects { get ; private set ; } = new Aid.Collections.ObservableList<Aspect>() ;
		public Aid.Collections.ObservableList<Axe> Axes { get ; private set ; } = new Aid.Collections.ObservableList<Axe>() ;
		public Aspect Aspect { get => Respect ; protected set { if( value==Aspect ) return ; Aspect.Set(a=>a.CollectionChanged-=OnAspectChanged) ; (Respect=value).Set(a=>a.CollectionChanged+=OnAspectChanged) ; PropertyChanged.On(this,"Aspect,Sources") ; } } Aspect Respect ;
		void OnAspectChanged( object subject , NotifyCollectionChangedEventArgs arg ) { var sub = Aspect is Path.Aspect ? SpectrumTabs : AspectTabs ; var six = sub.SelectedIndex ; if( sub==AspectTabs ) PropertyChanged.On(this,"Sources") ; sub.SelectedIndex = -1 ; sub.SelectedIndex = six ; }
		void AddActionButton_Click( object sender , RoutedEventArgs e ) { var dlg = new OpenFileDialog() ; if( dlg.ShowDialog(this)==true ) NewAction(dlg.FileName) ; }
		void BookGrid_SelectionChanged( object sender, SelectionChangedEventArgs e ) => PropertyChanged.On(this,"Sources") ;
		void AspectGrid_AutoGeneratedColumns( object sender , EventArgs e ) { var grid = sender as DataGrid ; var aspect = grid.ItemsSource is Aspect.Iterable a ? a.Context : null ; grid.Columns.Clear() ; uint i=0 ; foreach( var ax in aspect ) grid.Columns.Add(new DataGridTextColumn{Header=ax.Spec,Binding=new Binding( $"[{i++}]")}) ; }
		void AspectTabs_Selected( object sender, SelectionChangedEventArgs e ) { var asp = e.AddedItems.Count>0 ? e.AddedItems[0] : null ; switch( (DisplayTable.SelectedItem as TabItem)?.Header ) { case "Aspect" : (asp as Aspect).Set(a=>Aspect=a) ; break ; case "Spectrum" : (asp as Path)?.Spectrum.Set(a=>Aspect=a) ; break ; } }
		void AddAspectAxeButton_Click( object sender, RoutedEventArgs e ) => Aspect.Add(new Axe{Aspect=Aspect as Path.Aspect}.Set(Axes.Add)) ;
		void AspectAxisGridCommandBinding_Executed( object sender, ExecutedRoutedEventArgs e ) => ((sender as DataGrid)?.ItemsSource as Aspect).Remove((sender as DataGrid)?.SelectedItem as Axe) ;
		void AxisGridCommandBinding_Executed( object sender, ExecutedRoutedEventArgs e ) => ((sender as DataGrid)?.ItemsSource as Aid.Collections.ObservableList<Axe>).Remove((sender as DataGrid)?.SelectedItem as Axe) ;
		void AddAspectButton_Click( object sender, RoutedEventArgs e ) => Aspects.Add(new Aspect()) ;
		void AddAxeButton_Click( object sender, RoutedEventArgs e ) => Axes.Add(new Axe()) ;
		void AspectsGridCommandBinding_Executed( object sender, ExecutedRoutedEventArgs e ) => ((sender as DataGrid)?.ItemsSource as Aid.Collections.ObservableList<Aspect>).Remove((sender as DataGrid)?.SelectedItem as Aspect) ;
		void DisplayTable_SelectionChanged( object sender, SelectionChangedEventArgs e ){ var tab = e.AddedItems.Count>0 ? e.AddedItems[0] as TabItem : null ; switch( tab?.Header as string ) { case "Aspect" : Aspect = AspectsGrid.SelectedItem as Aspect ; break ; case "Spectrum" : Aspect = (((SpectrumTabs.SelectedItem as TabItem)?.Content as DataGrid)?.ItemsSource as Path ?? SpectrumTabs.ItemsSource.OfType<Path>().One())?.Spectrum ; break ; } }
	}
}
